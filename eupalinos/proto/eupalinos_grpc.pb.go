// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/eupalinos.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EupalinosClient is the client API for Eupalinos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EupalinosClient interface {
	// Bidirectional Streaming for task updates between Eupalinos pods
	StreamQueueUpdates(ctx context.Context, opts ...grpc.CallOption) (Eupalinos_StreamQueueUpdatesClient, error)
	// Unary RPC for epistello enqueueing
	EnqueueMessage(ctx context.Context, in *Epistello, opts ...grpc.CallOption) (*EnqueueResponse, error)
	// Unary RPC for epistello dequeueing
	DequeueMessage(ctx context.Context, in *ChannelInfo, opts ...grpc.CallOption) (*Epistello, error)
	// Unary RPC for getting the length of the queue
	GetQueueLength(ctx context.Context, in *ChannelInfo, opts ...grpc.CallOption) (*QueueLength, error)
}

type eupalinosClient struct {
	cc grpc.ClientConnInterface
}

func NewEupalinosClient(cc grpc.ClientConnInterface) EupalinosClient {
	return &eupalinosClient{cc}
}

func (c *eupalinosClient) StreamQueueUpdates(ctx context.Context, opts ...grpc.CallOption) (Eupalinos_StreamQueueUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Eupalinos_ServiceDesc.Streams[0], "/proto.Eupalinos/StreamQueueUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &eupalinosStreamQueueUpdatesClient{stream}
	return x, nil
}

type Eupalinos_StreamQueueUpdatesClient interface {
	Send(*MessageUpdate) error
	Recv() (*InternalEpistello, error)
	grpc.ClientStream
}

type eupalinosStreamQueueUpdatesClient struct {
	grpc.ClientStream
}

func (x *eupalinosStreamQueueUpdatesClient) Send(m *MessageUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eupalinosStreamQueueUpdatesClient) Recv() (*InternalEpistello, error) {
	m := new(InternalEpistello)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eupalinosClient) EnqueueMessage(ctx context.Context, in *Epistello, opts ...grpc.CallOption) (*EnqueueResponse, error) {
	out := new(EnqueueResponse)
	err := c.cc.Invoke(ctx, "/proto.Eupalinos/EnqueueMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eupalinosClient) DequeueMessage(ctx context.Context, in *ChannelInfo, opts ...grpc.CallOption) (*Epistello, error) {
	out := new(Epistello)
	err := c.cc.Invoke(ctx, "/proto.Eupalinos/DequeueMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eupalinosClient) GetQueueLength(ctx context.Context, in *ChannelInfo, opts ...grpc.CallOption) (*QueueLength, error) {
	out := new(QueueLength)
	err := c.cc.Invoke(ctx, "/proto.Eupalinos/GetQueueLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EupalinosServer is the server API for Eupalinos service.
// All implementations must embed UnimplementedEupalinosServer
// for forward compatibility
type EupalinosServer interface {
	// Bidirectional Streaming for task updates between Eupalinos pods
	StreamQueueUpdates(Eupalinos_StreamQueueUpdatesServer) error
	// Unary RPC for epistello enqueueing
	EnqueueMessage(context.Context, *Epistello) (*EnqueueResponse, error)
	// Unary RPC for epistello dequeueing
	DequeueMessage(context.Context, *ChannelInfo) (*Epistello, error)
	// Unary RPC for getting the length of the queue
	GetQueueLength(context.Context, *ChannelInfo) (*QueueLength, error)
	mustEmbedUnimplementedEupalinosServer()
}

// UnimplementedEupalinosServer must be embedded to have forward compatible implementations.
type UnimplementedEupalinosServer struct {
}

func (UnimplementedEupalinosServer) StreamQueueUpdates(Eupalinos_StreamQueueUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamQueueUpdates not implemented")
}
func (UnimplementedEupalinosServer) EnqueueMessage(context.Context, *Epistello) (*EnqueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueMessage not implemented")
}
func (UnimplementedEupalinosServer) DequeueMessage(context.Context, *ChannelInfo) (*Epistello, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DequeueMessage not implemented")
}
func (UnimplementedEupalinosServer) GetQueueLength(context.Context, *ChannelInfo) (*QueueLength, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueLength not implemented")
}
func (UnimplementedEupalinosServer) mustEmbedUnimplementedEupalinosServer() {}

// UnsafeEupalinosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EupalinosServer will
// result in compilation errors.
type UnsafeEupalinosServer interface {
	mustEmbedUnimplementedEupalinosServer()
}

func RegisterEupalinosServer(s grpc.ServiceRegistrar, srv EupalinosServer) {
	s.RegisterService(&Eupalinos_ServiceDesc, srv)
}

func _Eupalinos_StreamQueueUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EupalinosServer).StreamQueueUpdates(&eupalinosStreamQueueUpdatesServer{stream})
}

type Eupalinos_StreamQueueUpdatesServer interface {
	Send(*InternalEpistello) error
	Recv() (*MessageUpdate, error)
	grpc.ServerStream
}

type eupalinosStreamQueueUpdatesServer struct {
	grpc.ServerStream
}

func (x *eupalinosStreamQueueUpdatesServer) Send(m *InternalEpistello) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eupalinosStreamQueueUpdatesServer) Recv() (*MessageUpdate, error) {
	m := new(MessageUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Eupalinos_EnqueueMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Epistello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EupalinosServer).EnqueueMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Eupalinos/EnqueueMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EupalinosServer).EnqueueMessage(ctx, req.(*Epistello))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eupalinos_DequeueMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EupalinosServer).DequeueMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Eupalinos/DequeueMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EupalinosServer).DequeueMessage(ctx, req.(*ChannelInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eupalinos_GetQueueLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EupalinosServer).GetQueueLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Eupalinos/GetQueueLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EupalinosServer).GetQueueLength(ctx, req.(*ChannelInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Eupalinos_ServiceDesc is the grpc.ServiceDesc for Eupalinos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Eupalinos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Eupalinos",
	HandlerType: (*EupalinosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnqueueMessage",
			Handler:    _Eupalinos_EnqueueMessage_Handler,
		},
		{
			MethodName: "DequeueMessage",
			Handler:    _Eupalinos_DequeueMessage_Handler,
		},
		{
			MethodName: "GetQueueLength",
			Handler:    _Eupalinos_GetQueueLength_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamQueueUpdates",
			Handler:       _Eupalinos_StreamQueueUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/eupalinos.proto",
}
